/*

//selecting the elements(but in mostly used queryselector,querySelectorAll)
console.log(document.documentElement);
console.log(document.body);
console.log(document.head);
//document.querySelector('.header');//it select single element
const allsection=document.querySelectorAll('.section');//it select all elements
console.log(allsection);//it will be show the all sections in the html file
const one=document.getElementById('section--1');//using this getElementById we show the any partcular element using id
console.log(one);
const allButtons=document.getElementsByTagName('button');
console.log(allButtons);//it shows used buttons in page
console.log(document.getElementsByClassName('btn'));//using class name we access html elements

//creating and inserting elements
const header=document.querySelector('.header');
const message=document.createElement('div');
message.classList.add('cookie-Message');
message.innerHTML='We use cookies for improved functionality and analytics. <button class="btn btn-close-cookie">Got it</button>';
header.prepend(message);//it show the element in top of the page
header.append(message);//it show the element in bottom of the page
//header.append(message.cloneNode(true));//it show the element in multiple places
/*instance of append and prepand we using before and after
header.before(message);
header.after(message);*/
/*
//Deleting an element
document
.querySelector('.btn-close-cookie')
.addEventListener('click',function(){
    //message.remove();
    message.parentElement.removeChild(message);//Dom Traversing it is initial way for deleting element
    //in this method initially we call parentelement then remove the child element
});


//style
//element.style.propertyname='value'
message.style.backgroundColor='#37383d';
message.style.width='120%'
console.log(message.style.color);
console.log(message.style.backgroundColor);
console.log(getComputedStyle(message).color);
console.log(getComputedStyle(message).height);
message.style.height=Number.parseFloat(getComputedStyle(message).height,10)+ 30 + 'px';
document.documentElement.style.setProperty('--color-primary', 'orangered');

//attributes
const logo=document.querySelector('.nav__logo');
console.log(logo.alt);
console.log(logo.src);
console.log(logo.className)
//non-standard
console.log(logo.designer)//if you put any extra attribute in html element
// it will show undefined(non-standard)
console.log(logo.getAttribute('designer'));
logo.setAttribute('company','Bankist');//create new attribute
console.log(logo.src);//print the src of the logo
console.log(logo.getAttribute('src'));//get the exact location of the img
 
const link=document.querySelector('.twitter-link');
console.log(link.href);
console.log(link.getAttribute('href'));

//using Data Attribute
console.log(logo.dataset.versionNumber);

//
/*using this types because it will be add and delete based on
the name*/
/*
logo.classList.add('s','k');
logo.classList.remove('s','k');
logo.classList.toggle('s');
logo.classList.contains('s');//not includes

//don't use
logo.className='jonas'; /*dont use this because it will be override
the all existing classes and also it allows only put one class on any element

*/

const btnScrollTo=document.querySelector('.btn--scroll-to');
const section1=document.querySelector('#section--1');

btnScrollTo.addEventListener('click',function(e){
const s1coords=section1.getBoundingClientRect();
console.log(s1coords);
console.log(e.target.getBoundingClientRect())
console.log('Cuurent Scroll(X/Y)',window,pageXOffset,pageYOffset);
console.log('hieght/width viewport',document.documentElement.clientHeight,
document.documentElement.clientWidth);

//scrolling
// window.scrollTo({
//     left:s1coords.left + window.pageXOffset,
//     top: s1coords.top + window.pageYOffset,
//     behavior : 'smooth',
// })
//modern way of method to use scrolling(now using)
section1.scrollIntoView({behavior:'smooth'});
});

/*Events--Event handlers
    event is basically signal that is generated by a certain dumbnode
and a signal means that something has happened
Eventhandlers--handle those events*/

//MouseEnter event(its like hover in css)

const h1=document.querySelector('h1');
// h1.addEventListener('mouseenter',function(e){
//     alert('addEventListener:Great You are reading the heading');
const alertH1=function(e){
    alert('addEventListener:Great You are reading the heading');
    //remove events
    h1.removeEventListener('mouseenter',alertH1);//is used for only one time will be displayed
}

 h1.addEventListener('mouseenter',alertH1);
// //in this timeout method it helps after few time(sec,min) it will be close
// setTimeout(() => h1.removeEventListener('mouseenter',alertH1),300);
// //});

//EVENT PROPAGATION : BUBBLING AND CAPTURING
/*
const randomInt=(min,max)=>
Math.floor(Math.random() * (max - min + 1)+min);
const randomColor = ()=>
`rgb(${randomInt(0,255)},${randomInt(0,255)},${randomInt(0,255)})`;
// those three eventlistener recive the events from target element
document.querySelector('.nav__link').addEventListener
    ('click',function(e)
    {
        this.style.backgroundColor=randomColor();
        //event target-where the event originated(where the event first happend)
        console.log('LINK',e.target,e.currentTarget)
        console.log(e.currentTarget === this);
        //stop propagation it stop the fist ele it stop to move the nxt ele
       // e.stopPropagation(); //in during practice dont use event propagation
    });

    document.querySelector('.nav__links').addEventListener('click',function(e)
    {
        this.style.backgroundColor=randomColor();
        console.log('CONTAINER',e.target,e.currentTarget);
    })

    document.querySelector('.nav').addEventListener
    ('click',function(e)
    {
        this.style.backgroundColor= randomColor();
        console.log('NAV',e.target,e.currentTarget);
    })
*/
//Page Navigation
document.querySelectorAll('.nav__link').forEach(function(el){
    el.addEventListener('click',function(e){
       
    })
})
document.querySelector('.nav__links').addEventListener('click',function(e){
    e.preventDefault();// it stop to change the scroll movment
    if(e.target.classList.contains('nav__link')){
        const id=e.target.getAttribute('href');
        console.log(id);
        document.querySelector(id).scrollIntoView({behavior:'smooth'});
        //console.log('LINK');
    }
});

//DOM Traversal(we using this we can access the elements in inside the dom tree)
//going downwards : child
console.log(h1.querySelectorAll('.highlight'));//it describe inside the h1 tag how many elements will be used
console.log(h1.childNodes);
console.log(h1.children);
h1.firstElementChild.style.color='white';//it change one particular ele 
h1.lastElementChild.style.color='red';

//going upward : parents
console.log(h1.parentNode);
console.log(h1.parentElement)
h1.closest('.header').style.background='var(--gradient-secondary)';
h1.closest('.header').style.background='var(--gradient-primary)';

//going sideways: siblings
console.log(h1.previousElementSibling);
console.log(h1.nextElementSibling);
console.log(h1.previousSibling);
console.log(h1.nextSibling);
console.log(h1.parentElement.children);
[...h1.parentElement.children].forEach(function(el){
    if(el != h1) el.style.transform='scale(0.5)';
});